# Author : KOLANICH
# License : Unlicense

FIND_PACKAGE(Git)
if(GIT_FOUND)
  execute_process(
    COMMAND ${GIT_EXECUTABLE} describe --tags --dirty --long
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    OUTPUT_VARIABLE VERSION_FROM_GIT
    RESULT_VARIABLE GIT_RESULT
    ERROR_QUIET
    OUTPUT_STRIP_TRAILING_WHITESPACE
  )
  if(NOT GIT_RESULT EQUAL 0)
    message(WARNING "git returned error ${VERSION_FROM_GIT}")
    set(VERSION_FROM_GIT "unknown")
  endif()
else(GIT_FOUND)
  set(VERSION_FROM_GIT "v0.0.0.0")
endif(GIT_FOUND)


string(REGEX MATCH "^v[0-9]+(\\.[0-9]+)+" VERSION ${VERSION_FROM_GIT})
string(REGEX MATCHALL "[0-9]+" PARSED_VER ${VERSION})

list(LENGTH PARSED_VER PARSED_VER_LEN)
if(PARSED_VER_LEN GREATER 0)
  list(GET PARSED_VER 0 VERSION_MAJOR)
else()
  set(VERSION_MAJOR 0)
endif()
if(PARSED_VER_LEN GREATER 1)
  list(GET PARSED_VER 1 VERSION_MINOR)
else()
  set(VERSION_MINOR 0)
endif()
if(PARSED_VER_LEN GREATER 2)
  list(GET PARSED_VER 2 VERSION_PATCH)
else()
  set(VERSION_PATCH 0)
endif()
if(PARSED_VER_LEN GREATER 3)
  list(GET PARSED_VER 3 VERSION_TWEAK)
else()
  set(VERSION_TWEAK 0)
endif()

set(VERSION_BIN "${VERSION_MAJOR}${VERSION_MINOR}${VERSION_PATCH}")
message(STATUS "${PACKAGE_NAME} version: ${VERSION}")
message(STATUS "${PACKAGE_NAME} bin version: ${VERSION_BIN}")

if(GIT_FOUND)
  execute_process(
    COMMAND ${GIT_EXECUTABLE} log -1 --pretty=format:%ct
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    OUTPUT_VARIABLE COMPTIME
    RESULT_VARIABLE GIT_RESULT
    ERROR_QUIET
    OUTPUT_STRIP_TRAILING_WHITESPACE
  )
  if(NOT GIT_RESULT EQUAL 0)
    set(COMPTIME "0000000000")
  endif()

  execute_process(
    COMMAND ${GIT_EXECUTABLE} log -1 --pretty=format:%D
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    OUTPUT_VARIABLE VERSION_EXPORT
    RESULT_VARIABLE GIT_RESULT
    ERROR_QUIET
    OUTPUT_STRIP_TRAILING_WHITESPACE
  )
  if(NOT GIT_RESULT EQUAL 0)
    set(VERSION_EXPORT "HEAD -> master")
  endif()
else(GIT_FOUND)
  set(COMPTIME "0000000000")
  set(VERSION_EXPORT "HEAD -> master")
endif(GIT_FOUND)
set(VERSION_TAG "${VERSION_EXPORT} ${VERSION_FROM_GIT}")
message(STATUS "version tag: ${VERSION_TAG}")
